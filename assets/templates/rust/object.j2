{% macro rust_type(prop) %}
  {%- if prop.format == "uuid" -%}
    uuid::Uuid
  {%- elif prop.format == "date-time" -%}
    chrono::DateTime<chrono::Utc>
  {%- elif prop.format == "int64" and prop.type == "number" and prop.minimum == 0 -%}
    u64
  {%- elif prop.format == "int64" and prop.type == "number" -%}
    i64
  {%- elif prop.format == "int32" and prop.type == "number" and prop.minimum == 0 -%}
    u32
  {%- elif prop.format == "int32" and prop.type == "number" -%}
    i32
  {%- elif prop.format == "int16" and prop.type == "number" and prop.minimum == 0 -%}
    u16
  {%- elif prop.format == "int16" and prop.type == "number" -%}
    i16
  {%- elif prop.format == "float" -%}
    f32
  {%- elif prop.format == "double" -%}
    f64
  {%- elif prop["$ref"] -%}
    {{ prop["$ref"] | replace('#/components/schemas/', '') }}
  {%- elif prop.format is not defined and prop.type == "string" -%}
    String
  {%- elif prop.type == "boolean" -%}
    bool
  {%- else -%}
    __NOT_SUPPORTED__ (properties: {{prop}})
  {%- endif -%}
{% endmacro %}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct {{ name | pascal_case }} {
  {% for key in properties %}
  {%- set prop = properties[key] %}
  {%- set prop_rust_type = rust_type(prop) %}
  {% if prop.description %}
  /// {{ prop.description | trim | replace('\n', '\n  /// ') }}
  {%- endif %}
  {%- if key in required %}
  pub {{ key }}: {{ prop_rust_type }},
  {% elif prop_rust_type == "String" %}
  #[serde(default, skip_serializing_if = "String::is_empty")]
  pub {{ key }}: {{ prop_rust_type }},
  {% else %}
  #[serde(default, skip_serializing_if = "Option::is_none")]
  pub {{ key }}: Option<{{ prop_rust_type }}>,
  {% endif %}
  {%- endfor %}
}